package com.self.service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Vector;

//
import com.self.vo.child.Magazine;
import com.self.vo.child.Novel;
import com.self.vo.parent.Book;

public class BookManagerImpl implements BookManager {
	private int deleteCount = 0;
	private List<Book> books;
	private static final BookManagerImpl bookManagerImpl = new BookManagerImpl();
//dsa
	private BookManagerImpl() {
		books = new ArrayList<>();
	}

	public static final BookManagerImpl getInstance() {
		return bookManagerImpl;
	}

	@Override
	public void insertBook(Book book) {
		books.add(book);
	}

	// 우진 코드 사용
	@Override
	public void deleteBook(int isbn) {
		Book target = null;
		for (Book b : books) {
			if (b.getIsbn() == isbn) {
				target = b;
				break;
			}
		}
		if (target != null) {
			books.remove(target);
			deleteCount--;
		} else {
			System.out.println("삭제할 값을 찾지 못했습니다.");
		}
	}

	// 우진 코드
	@Override
	public void updateBook(Book book) {
		for (int i = 0; i < books.size(); i++) {
			if (books.get(i) == null)
				break;
			if (books.get(i).getIsbn() == book.getIsbn()) {
				if (books.get(i) instanceof Magazine)
					books.set(i, (Magazine) book);
				else if (books.get(i) instanceof Novel)
					books.set(i, (Novel) book);
			}
		}
	}

	// 우진 코드
	@Override
	public Book getBook(int isnb) {
		Book find = null;
		for (Book b : books) {
			if (b.getIsbn() == isnb) {
				find = b;
				break;
			}
		}
		if (find == null)
			System.out.println("원하는 책을 발견하지 못했습니다.");
		return find;
	}

	@Override
	public List<Book> getAllBook() {
		return books;
	}

	@Override
	public int getNumberOfBooks() {
		return books.size();
	}

	// 우진 코드
	@Override
	public List<Book> searchBookByTitle(String title) {
		List<Book> result = new ArrayList<>();
		for (Book b : books) {
			if (b.getTitle().equals(title)) {
				result.add(b);
			}
		}
		return result;
	}

	//
	@Override
	public List<Book> searchBookByPrice(int min, int max) {
		List<Book> result = new ArrayList<>();
		for (Book b : books) {
			if ((int) b.getPrice() >= min && (int) b.getPrice() <= max) {
				result.add(b);
			}
		}
		return result;
	}

	@Override
	public double getSumPriceOfBooks() {
		double sum = 0;
		for (Book b : books) {
			sum += b.getPrice();
		}
		return sum;
	}

	@Override
	public double getAvgPriceOfBooks() {
		return books.isEmpty() ? -1 : getSumPriceOfBooks() / getNumberOfBooks();
	}

	@Override
	public List<Book> groupBook(String genre) {
		List<Book> result = new ArrayList<>();
		for (Book b : books) {
			if (b instanceof Novel && ((Novel) b).getGenre().equals(genre)) {
				result.add(b);
			}
		}
		return result;
	}

	@Override
	public List<Book> monthlyBook(int month) {
		List<Book> result = new ArrayList<>();
		for (Book b : books) {
			if (b instanceof Magazine && ((Magazine) b).getMonth() == month)
				result.add(b);
		}
		return result;
	}
}
